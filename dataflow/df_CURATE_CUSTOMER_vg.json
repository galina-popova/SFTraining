{
	"name": "df_CURATE_CUSTOMER_vg",
	"properties": {
		"folder": {
			"name": "curration"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_ingestion_customer_tbl_vg",
						"type": "DatasetReference"
					},
					"name": "IngCustomer"
				},
				{
					"dataset": {
						"referenceName": "ds_curration_customer_vg",
						"type": "DatasetReference"
					},
					"name": "CurCustomers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_curration_customer_vg",
						"type": "DatasetReference"
					},
					"name": "InsertNewRecords"
				}
			],
			"transformations": [
				{
					"name": "FilterNullValues"
				},
				{
					"name": "joinIngestioAndCuration"
				},
				{
					"name": "RenameColumns"
				},
				{
					"name": "SplitNewRecords"
				},
				{
					"name": "addColumns"
				},
				{
					"name": "selectingComparableColumns"
				},
				{
					"name": "AddingRowsSignature"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerDimId as integer,",
				"          UniqueCustomerNumber as string,",
				"          CustomerName as string,",
				"          Phone as string,",
				"          Email as string,",
				"          BillingAddress as string,",
				"          BillingCity as string,",
				"          BillingPostalCode as string,",
				"          BillingState as string,",
				"          BillingCountryName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> IngCustomer",
				"source(output(",
				"          CustomerDimId as integer,",
				"          UniqueCustomerNumber as string,",
				"          CustomerName as string,",
				"          Phone as string,",
				"          Email as string,",
				"          BillingAddress as string,",
				"          BillingCity as string,",
				"          BillingPostalCode as string,",
				"          BillingState as string,",
				"          BillingCountryName as string,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          IsActive as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CurCustomers",
				"IngCustomer filter(isNull(UniqueCustomerNumber)) ~> FilterNullValues",
				"FilterNullValues, CurCustomers join(IngCustomer@UniqueCustomerNumber == CurCustomers@UniqueCustomerNumber,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> joinIngestioAndCuration",
				"joinIngestioAndCuration select(mapColumn(",
				"          ING_CustomerDimId = IngCustomer@CustomerDimId,",
				"          ING_UniqueCustomerNumber = IngCustomer@UniqueCustomerNumber,",
				"          ING_CustomerName = IngCustomer@CustomerName,",
				"          ING_Phone = IngCustomer@Phone,",
				"          ING_Email = IngCustomer@Email,",
				"          ING_BillingAddress = IngCustomer@BillingAddress,",
				"          ING_BillingCity = IngCustomer@BillingCity,",
				"          ING_BillingPostalCode = IngCustomer@BillingPostalCode,",
				"          ING_BillingState = IngCustomer@BillingState,",
				"          ING_BillingCountryName = IngCustomer@BillingCountryName,",
				"          CUR_CustomerDimId = CurCustomers@CustomerDimId,",
				"          CUR_UniqueCustomerNumber = CurCustomers@UniqueCustomerNumber,",
				"          CUR_CustomerName = CurCustomers@CustomerName,",
				"          CUR_Phone = CurCustomers@Phone,",
				"          CUR_Email = CurCustomers@Email,",
				"          CUR_BillingAddress = CurCustomers@BillingAddress,",
				"          CUR_BillingCity = CurCustomers@BillingCity,",
				"          CUR_BillingPostalCode = CurCustomers@BillingPostalCode,",
				"          CUR_BillingState = CurCustomers@BillingState,",
				"          CUR_BillingCountryName = CurCustomers@BillingCountryName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumns",
				"RenameColumns split(isNull(CUR_UniqueCustomerNumber),",
				"     disjoint: false) ~> SplitNewRecords@(newCustomers, existingCustomers)",
				"SplitNewRecords@newCustomers derive(CUR_ValidFrom = currentUTC(),",
				"          CUR_ValidTo = toTimestamp('9999-12-31 00-00-00'),",
				"          CUR_IsActive = 1) ~> addColumns",
				"SplitNewRecords@existingCustomers select(mapColumn(",
				"          ING_CustomerDimId,",
				"          ING_UniqueCustomerNumber,",
				"          ING_CustomerName,",
				"          ING_Phone,",
				"          ING_Email,",
				"          ING_BillingAddress,",
				"          ING_BillingCity,",
				"          ING_BillingPostalCode,",
				"          ING_BillingState,",
				"          ING_BillingCountryName,",
				"          CUR_CustomerDimId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingComparableColumns",
				"selectingComparableColumns derive(ING_Signature = sha2(256, ING_UniqueCustomerNumber,ING_CustomerName,ING_Phone,ING_Email,ING_BillingAddress,ING_BillingCity,ING_BillingPostalCode,ING_BillingState,ING_BillingCountryName)) ~> AddingRowsSignature",
				"addColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerDimId as integer,",
				"          UniqueCustomerNumber as string,",
				"          CustomerName as string,",
				"          Phone as string,",
				"          Email as string,",
				"          BillingAddress as string,",
				"          BillingCity as string,",
				"          BillingPostalCode as string,",
				"          BillingState as string,",
				"          BillingCountryName as string,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          IsActive as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          UniqueCustomerNumber = ING_UniqueCustomerNumber,",
				"          CustomerName = ING_CustomerName,",
				"          Phone = ING_Phone,",
				"          Email = ING_Email,",
				"          BillingAddress = ING_BillingAddress,",
				"          BillingCity = ING_BillingCity,",
				"          BillingPostalCode = ING_BillingPostalCode,",
				"          BillingState = ING_BillingState,",
				"          BillingCountryName = ING_BillingCountryName,",
				"          ValidFrom = CUR_ValidFrom,",
				"          ValidTo = CUR_ValidTo,",
				"          IsActive = CUR_IsActive",
				"     )) ~> InsertNewRecords"
			]
		}
	}
}