{
	"name": "df_curation_BankStatuses",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_ingestion_BankStatuses",
						"type": "DatasetReference"
					},
					"name": "sourceIngestionBankStatuses"
				},
				{
					"dataset": {
						"referenceName": "DS_Curation_BankStatuses",
						"type": "DatasetReference"
					},
					"name": "sourceCurationBankStatus"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Curation_BankStatuses",
						"type": "DatasetReference"
					},
					"name": "sinkCurationBankStatuses"
				}
			],
			"transformations": [
				{
					"name": "joinBankStatus"
				},
				{
					"name": "selectBankStatuses"
				},
				{
					"name": "splitBankStatuses"
				}
			],
			"scriptLines": [
				"source(output(",
				"          BankStatusId as integer,",
				"          BankStatusCode as string,",
				"          BankStatusName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceIngestionBankStatuses",
				"source(output(",
				"          BankStatusId as integer,",
				"          BankStatusCode as string,",
				"          BankStatusName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceCurationBankStatus",
				"sourceIngestionBankStatuses, sourceCurationBankStatus join(sourceIngestionBankStatuses@BankStatusName == sourceCurationBankStatus@BankStatusName,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> joinBankStatus",
				"joinBankStatus select(mapColumn(",
				"          IngBankStatusId = sourceIngestionBankStatuses@BankStatusId,",
				"          IngBankStatusCode = sourceIngestionBankStatuses@BankStatusCode,",
				"          IngBankStatusName = sourceIngestionBankStatuses@BankStatusName,",
				"          CuBankStatusId = sourceCurationBankStatus@BankStatusId,",
				"          CuBankStatusCode = sourceCurationBankStatus@BankStatusCode,",
				"          CuBankStatusName = sourceCurationBankStatus@BankStatusName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectBankStatuses",
				"selectBankStatuses split(iifNull(CuBankStatusCode),",
				"     and(IngBankStatusCode == CuBankStatusCode, IngBankStatusName != CuBankStatusName),",
				"     disjoint: false) ~> splitBankStatuses@(InsertRows, UpdateRows, )",
				"splitBankStatuses@InsertRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BankStatusId as integer,",
				"          BankStatusCode as string,",
				"          BankStatusName as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['BankStatusName'],",
				"     format: 'table',",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BankStatusCode = IngBankStatusCode,",
				"          BankStatusName = IngBankStatusName",
				"     )) ~> sinkCurationBankStatuses"
			]
		}
	}
}