{
	"name": "Cur_payment_statuses",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ING_paymentStatuses",
						"type": "DatasetReference"
					},
					"name": "ingPaymStat"
				},
				{
					"dataset": {
						"referenceName": "ds_cur_paymentStauses",
						"type": "DatasetReference"
					},
					"name": "CurPaymStat"
				},
				{
					"dataset": {
						"referenceName": "Ing_Bank_Statuses",
						"type": "DatasetReference"
					},
					"name": "ingBankStatus"
				},
				{
					"dataset": {
						"referenceName": "ds_cur_bankStauses",
						"type": "DatasetReference"
					},
					"name": "CurBankStatus"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_cur_paymentStauses",
						"type": "DatasetReference"
					},
					"name": "CurPaymStatusesInsertNew"
				},
				{
					"dataset": {
						"referenceName": "ds_cur_bankStauses",
						"type": "DatasetReference"
					},
					"name": "CurNewrows"
				},
				{
					"dataset": {
						"referenceName": "ds_cur_bankStauses",
						"type": "DatasetReference"
					},
					"name": "BankStatusUpdatedRows"
				}
			],
			"transformations": [
				{
					"name": "RecDoesnExists"
				},
				{
					"name": "BSIngJoinCur"
				},
				{
					"name": "renameCols"
				},
				{
					"name": "splitNewUpd"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PaymentStatusId as integer,",
				"          PaymentStatusName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ingPaymStat",
				"source(output(",
				"          PaymentStatusId as integer,",
				"          PaymentStatusName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CurPaymStat",
				"source(output(",
				"          BankStatusId as integer,",
				"          BankStatusCode as string,",
				"          BankStatusName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ingBankStatus",
				"source(output(",
				"          BankStatusId as integer,",
				"          BankStatusCode as string,",
				"          BankStatusName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CurBankStatus",
				"ingPaymStat, CurPaymStat exists(ingPaymStat@PaymentStatusName == CurPaymStat@PaymentStatusName,",
				"     negate:true,",
				"     broadcast: 'auto')~> RecDoesnExists",
				"ingBankStatus, CurBankStatus join(ingBankStatus@BankStatusCode == CurBankStatus@BankStatusCode,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> BSIngJoinCur",
				"BSIngJoinCur select(mapColumn(",
				"          ING_BankStatusId = ingBankStatus@BankStatusId,",
				"          ING_BankStatusCode = ingBankStatus@BankStatusCode,",
				"          ING_BankStatusName = ingBankStatus@BankStatusName,",
				"          CUR_BankStatusId = CurBankStatus@BankStatusId,",
				"          CUR_BankStatusCode = CurBankStatus@BankStatusCode,",
				"          CUR_BankStatusName = CurBankStatus@BankStatusName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renameCols",
				"renameCols split(isNull(CUR_BankStatusCode),",
				"     and( ING_BankStatusCode==CUR_BankStatusCode , ING_BankStatusName!=CUR_BankStatusName),",
				"     disjoint: false) ~> splitNewUpd@(New, forUpdate, notChnaged)",
				"RecDoesnExists sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PaymentStatusId as integer,",
				"          PaymentStatusName as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          PaymentStatusName",
				"     )) ~> CurPaymStatusesInsertNew",
				"splitNewUpd@New sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BankStatusId as integer,",
				"          BankStatusCode as string,",
				"          BankStatusName as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BankStatusCode = ING_BankStatusCode,",
				"          BankStatusName = ING_BankStatusName",
				"     )) ~> CurNewrows",
				"splitNewUpd@forUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BankStatusId as integer,",
				"          BankStatusCode as string,",
				"          BankStatusName as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['CUR_BankStatusCode'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> BankStatusUpdatedRows"
			]
		}
	}
}